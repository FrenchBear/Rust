rtt utility specs (Rust Text Type)
Determine text files type

glob argument, or process stdin (similar to rwc)

Show information about text files:
- ASCII (7-bit), 8-bit (likely OEM or ANSI), UTF-8, UTF-16 (with BOM detection)
- Ends of line Windows (\r\n), Unix (\n), Mac (\r)

Detects:
- Empty files
- No characters <32 other than \r, \n, \t
- Presence of UTF-16 header in UTF-8 file

For dev debug, based on extension, some files should be text files, otherwise emit a visible warning:
Sources: *.{awk,c,cpp,cs,fs,go,h,java,jl,js,lua,py,rs,sql,ts,vb,xaml}
VB6: *.{bas,frm,cls,ctl,vbp,vbg}
Projects *.{sln,csproj,vbproj,fsproj,pyproj,vcxproj}
Misc: *.{appxmanifest,clang-format,classpath,ruleset,editorconfig,gitignore,globalconfig,resx,targets,pubxml,filters}
Config: *.{ini,xml,yml,yaml,json,toml}
Scripts: *.{bat,cmd,ps1,sh,vbs}
Text: *.{txt,md}
Other: Makefile

---

Build a crate that contains read_text_file
Returns Result<TextData, io::Error>

struct TextData {
	text: Option<String>,
	encoding: TextFileEncoding,
}

enum TextFileEncoding {
	NotText,
	Empty,
	ASCII,
	EightBit,
	UTF8,
	UTF8BOM,		// Starts with EF BB BF
	UTF16,			// No BOM, assume UTF16LE (should use heuristics)
	UTF16LE,		// Starts with FF FE (Windows)
	UTF16BE,		// Starts with FE FF
}

- Read first 1000 bytes max to detect text encoding, if it's not recognized as text, return quickly
- Otherwise read and decode full text (without BOM), return text and TextFileEncoding

Crate can also expose a function to detect EOL from a &str, returning an enum:
enum TextFileEOLStyle {
	None,
	Windows,
	Unix,
	Mac,
	Mixed,
}
